<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>404 â€” Page not found</title>
    <style>
        :root {
            --bg1: #ffffff;
            /* deep indigo */
            --bg2: #ffffff;
            /* indigo */
            --accent: #ffd166;
            /* warm gold */
            --muted: #b8c1ec;
            --glass: rgba(255, 255, 255, 0.904);
        }

        * {
            box-sizing: border-box
        }

        html,
        body {
            height: 100%
        }

        body {
            margin: 0;
            font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
            background: radial-gradient(1200px 600px at 10% 10%, rgba(255, 255, 255, 0.02), transparent), linear-gradient(135deg, var(--bg1), var(--bg2));
            color: #000000;
            -webkit-font-smoothing: antialiased;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 48px;
        }

        .card {
            width: 100%;
            max-width: 980px;
            background: linear-gradient(180deg, rgba(255, 255, 255, 0.03), rgba(255, 255, 255, 0.01));
            border-radius: 18px;
            padding: 34px;
            box-shadow: 0 10px 30px rgba(2, 6, 23, 0.6);
            display: grid;
            grid-template-columns: 1fr 420px;
            gap: 28px;
            align-items: center;
            position: relative;
            overflow: hidden;
        }

        /* Decorative floating stars */
        .stars {
            position: absolute;
            inset: 0;
            pointer-events: none
        }

        .star {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.08);
            box-shadow: 0 0 12px rgba(255, 255, 255, 0.06)
        }

        h1 {
            margin: 0 0 8px 0;
            font-size: 64px;
            line-height: 1;
            letter-spacing: -1px;
            color: var(--accent);
            text-shadow: 0 6px 30px rgba(0, 0, 0, 0.6);
            display: flex;
            gap: 12px;
            align-items: center
        }

        .code {
            font-family: Menlo, Monaco, 'Courier New', monospace;
            font-weight: 700;
            font-size: 22px;
            color:black;
        }

        p.lead {
            margin: 0 0 18px 0;
            color: #000000;
            opacity: 0.95
        }

        .actions {
            display: flex;
            gap: 12px;
            flex-wrap: wrap
        }

        .btn {
            border: 0;
            padding: 12px 16px;
            border-radius: 10px;
            background: var(--glass);
            backdrop-filter: blur(6px);
            cursor: pointer;
            color: var(--muted);
            font-weight: 600;
            transition: all .18s ease;
            box-shadow: inset 0 -6px 12px rgba(255, 255, 255, 0.02)
        }

        .btn:hover {
            transform: translateY(-3px)
        }

        .btn.primary {
            background: linear-gradient(90deg, var(--accent), #ffb86b);
            color: #081024
        }

        /* Visual right pane: robot */
        .visual {
            display: flex;
            align-items: center;
            justify-content: center
        }

        .robot {
            width: 320px;
            height: 320px;
            border-radius: 24px;
            background: linear-gradient(180deg, rgba(255, 255, 255, 0.02), rgba(0, 0, 0, 0.12));
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            padding: 18px;
            box-shadow: 0 20px 40px rgba(2, 6, 23, 0.6)
        }

        svg {
            max-width: 100%;
            height: auto;
            display: block
        }

        .glitch {
            position: relative;
            display: inline-block;
            font-weight: 900;
            font-size: 86px;
            letter-spacing: 2px;
            color: #fff;
        }

        .glitch::before,
        .glitch::after {
            content: attr(data-text);
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            overflow: hidden;
            clip: rect(0, 900px, 0, 0);
        }

        .glitch::before {
            animation: glitchTop 2.1s infinite;
            color: #ff5c8a;
            mix-blend-mode: screen
        }

        .glitch::after {
            animation: glitchBottom 2.4s infinite;
            color: #3be6ff;
            mix-blend-mode: screen
        }

        @keyframes glitchTop {
            0% {
                clip: rect(0, 900px, 0, 0);
                transform: translate(0)
            }

            10% {
                clip: rect(0, 900px, 40px, 0);
                transform: translate(-6px, -3px)
            }

            20% {
                clip: rect(10px, 900px, 80px, 0);
                transform: translate(6px, 2px)
            }

            30% {
                clip: rect(0, 900px, 0, 0);
                transform: translate(0)
            }

            100% {
                clip: rect(0, 900px, 0, 0)
            }
        }

        @keyframes glitchBottom {
            0% {
                clip: rect(0, 900px, 0, 0);
                transform: translate(0)
            }

            10% {
                clip: rect(40px, 900px, 120px, 0);
                transform: translate(4px, 5px)
            }

            20% {
                clip: rect(60px, 900px, 140px, 0);
                transform: translate(-3px, -4px)
            }

            30% {
                clip: rect(0, 900px, 0, 0);
                transform: translate(0)
            }

            100% {
                clip: rect(0, 900px, 0, 0)
            }
        }

        /* small footer text */
        .muted {
            font-size: 13px;
            color: rgba(0, 0, 0, 0.55)
        }

        /* responsive */
        @media (max-width:880px) {
            .card {
                grid-template-columns: 1fr;
                max-width: 760px
            }

            .robot {
                width: 260px;
                height: 260px
            }
        }

        @media (max-width:520px) {
            h1 {
                font-size: 42px
            }

            .glitch {
                font-size: 52px
            }
        }
    </style>
</head>

<body data-theme="light">
    <main class="card" role="main" aria-labelledby="title">
        <div>
            <div style="display:flex;align-items:center;gap:14px;margin-bottom:12px">
                <img src="/assets/logo.png" alt="" width="10%">
                <div class="muted">CodeWithAJoydas</div>
            </div>

            <h1 id="title"><span class="glitch" data-text="404">404</span><span class="code">Page not found</span></h1>
            <p class="lead">Looks like the page you were looking for has gone on a short trip through time. It might
                have moved, been removed, or never existed.</p>

            <div class="actions" role="navigation" aria-label="404 actions">
                <button class="btn primary" id="homeBtn" onclick="goHome()">Take me home</button>
                <button class="btn" id="retryBtn" onclick="retry()">Try again</button>
                <button class="btn" onclick="report()">Report this</button>
            </div>

            
        </div>

        <aside class="visual" aria-hidden="true">
            <div class="robot" id="robot">
                <!-- Simple SVG robot illustration with subtle animation -->
                <svg viewBox="0 0 200 200" width="300" height="300" xmlns="http://www.w3.org/2000/svg">
                    <defs>
                        <linearGradient id="g1" x1="0" x2="1">
                            <stop offset="0" stop-color="#ffffff" stop-opacity="0.06" />
                            <stop offset="1" stop-color="#000000" stop-opacity="0.12" />
                        </linearGradient>
                    </defs>
                    <rect x="8" y="30" width="184" height="140" rx="16" fill="url(#g1)"
                        stroke="rgba(255,255,255,0.04)" />

                    <!-- Eyes -->
                    <g id="eyes">
                        <rect x="54" y="70" width="28" height="22" rx="6" fill="#102030" />
                        <rect x="118" y="70" width="28" height="22" rx="6" fill="#102030" />
                        <circle cx="68" cy="81" r="6" fill="#ffd166">
                            <animate attributeName="r" values="6;3;6" dur="2.2s" repeatCount="indefinite" />
                        </circle>
                        <circle cx="132" cy="81" r="6" fill="#3be6ff">
                            <animate attributeName="r" values="6;4;6" dur="2.8s" repeatCount="indefinite" />
                        </circle>
                    </g>

                    <!-- Antenna -->
                    <g>
                        <rect x="92" y="18" width="16" height="28" rx="6" fill="#0b1220" />
                        <circle cx="100" cy="14" r="8" fill="#ff5c8a">
                            <animate attributeName="cy" values="14;10;14" dur="3s" repeatCount="indefinite" />
                        </circle>
                    </g>

                    <!-- Mouth (broken) -->
                    <g>
                        <rect x="72" y="116" width="56" height="8" rx="4" fill="#0b1220" />
                        <rect x="86" y="116" width="8" height="8" rx="2" fill="#ffd166">
                    </g>

                </svg>
            </div>
        </aside>

        <div class="stars" aria-hidden="true">
            <!-- programmatically generated stars -->
        </div>
    </main>

    <script>
        // generate subtle stars
        (function () {
            const wrap = document.querySelector('.stars');
            const count = 22;
            for (let i = 0; i < count; i++) {
                const s = document.createElement('div');
                s.className = 'star';
                const size = Math.random() * 3 + 1;
                s.style.width = s.style.height = size + 'px';
                s.style.left = (Math.random() * 100) + '%';
                s.style.top = (Math.random() * 100) + '%';
                s.style.opacity = (Math.random() * 0.6 + 0.12).toFixed(2);
                s.style.transform = `translateZ(0)`;
                wrap.appendChild(s);
            }
        })();

        // actions
        function goHome() {
            // try to go to root, fallback to history
            if (location.origin) { location.href = '/'; } else { history.pushState(null, '', '/'); }
        }
        function retry() { location.reload(); }
        function report() {
            const url = location.href;
            const body = encodeURIComponent('I found a broken link: ' + url);
            window.open('mailto:site-codewithajoydas@gmail.com?subject=Broken%20link%20report&body=' + body);
        }

        // keyboard niceties
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') window.scrollTo({ top: 0, behavior: 'smooth' });
            if (e.key === 'h' || e.key === 'H') goHome();
        });
    </script>
</body>

</html>